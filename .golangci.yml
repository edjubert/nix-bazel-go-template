---
run:
  # default concurrency is a available CPU number
  concurrency: 8

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: "5m"

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # List of build tags, all linters use it.
  # Default: [].
  build-tags: []

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs: []

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files: []

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: "readonly"

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is
  # "colored-line-number"
  format: "colored-line-number"

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: true

# all available settings of specific linters
linters-settings:
  depguard:
    list-type: "denylist"
    # Create additional guards that follow the same configuration pattern.
    # Results from all guards are aggregated together.
    additional-guards: []

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ :=
    # strconv.Atoi(numStr)`; default is false: such cases aren't reported by
    # default.
    check-blank: false
  govet:
    # report about shadowed variables
    check-shadowing: false
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: ""
  revive:
    # see https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: false
    severity: "warning"
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
    rules:
      - name: "blank-imports"
      - name: "context-as-argument"
      - name: "context-keys-type"
      - name: "dot-imports"
      - name: "error-return"
      - name: "error-strings"
      - name: "error-naming"
      - name: "exported"
      - name: "increment-decrement"
      - name: "var-naming"
      - name: "range"
      - name: "receiver-naming"
      - name: "time-naming"
      - name: "unexported-return"
      - name: "indent-error-flow"
      - name: "errorf"
  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space.
    allow-leading-space: false
    # Exclude following linters from requiring an explanation.
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    require-specific: true

linters:
  disable-all: true
  enable:
    - "depguard"
    - "errcheck"
    - "gofmt"
    - "goimports"
    - "ineffassign"
    - "nolintlint"
    - "revive"
    - "unconvert"
    - "unused"
    - "vet"

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - linters:
        - "revive"
      source: "^// Deprecated:"

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false
